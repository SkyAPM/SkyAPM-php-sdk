/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.skywalking.apm.network.language.agent.v2";
option csharp_namespace = "SkyWalking.NetworkProtocol";
option go_package = "skywalking/network/language/agent/v2";

import "common/common.proto";
import "common/trace-common.proto";

service TraceSegmentReportService {
    rpc collect (stream UpstreamSegmentV2) returns (CommandsV2) {
    }
}

message SegmentObjectV2 {
    UniqueIdV2 traceSegmentId = 1;
    repeated SpanObjectV2 spans = 2;
    int32 serviceId = 3;
    int32 serviceInstanceId = 4;
    bool isSizeLimited = 5;
}

message SegmentReferenceV2 {
    RefTypeV2 refType = 1;
    UniqueIdV2 parentTraceSegmentId = 2;
    int32 parentSpanId = 3;
    int32 parentServiceInstanceId = 4;
    string networkAddress = 5;
    int32 networkAddressId = 6;
    int32 entryServiceInstanceId = 7;
    string entryEndpoint = 8;
    int32 entryEndpointId = 9;
    string parentEndpoint = 10;
    int32 parentEndpointId = 11;
}

message SpanObjectV2 {
    int32 spanId = 1;
    int32 parentSpanId = 2;
    int64 startTime = 3;
    int64 endTime = 4;
    repeated SegmentReferenceV2 refs = 5;
    int32 operationNameId = 6;
    string operationName = 7;
    int32 peerId = 8;
    string peer = 9;
    SpanTypeV2 spanType = 10;
    SpanLayerV2 spanLayer = 11;
    int32 componentId = 12;
    string component = 13;
    bool isError = 14;
    repeated KeyStringValuePairV2 tags = 15;
    repeated LogV2 logs = 16;
}

message LogV2 {
    int64 time = 1;
    repeated KeyStringValuePairV2 data = 2;
}
