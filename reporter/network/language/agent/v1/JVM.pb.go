// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/JVM.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	v1 "github.com/SkyAPM/SkyAPM-php-sdk/reporter/network/common/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PoolTypeV1 int32

const (
	PoolTypeV1_CODE_CACHE_USAGE PoolTypeV1 = 0
	PoolTypeV1_NEWGEN_USAGE     PoolTypeV1 = 1
	PoolTypeV1_OLDGEN_USAGE     PoolTypeV1 = 2
	PoolTypeV1_SURVIVOR_USAGE   PoolTypeV1 = 3
	PoolTypeV1_PERMGEN_USAGE    PoolTypeV1 = 4
	PoolTypeV1_METASPACE_USAGE  PoolTypeV1 = 5
)

var PoolTypeV1_name = map[int32]string{
	0: "CODE_CACHE_USAGE",
	1: "NEWGEN_USAGE",
	2: "OLDGEN_USAGE",
	3: "SURVIVOR_USAGE",
	4: "PERMGEN_USAGE",
	5: "METASPACE_USAGE",
}

var PoolTypeV1_value = map[string]int32{
	"CODE_CACHE_USAGE": 0,
	"NEWGEN_USAGE":     1,
	"OLDGEN_USAGE":     2,
	"SURVIVOR_USAGE":   3,
	"PERMGEN_USAGE":    4,
	"METASPACE_USAGE":  5,
}

func (x PoolTypeV1) String() string {
	return proto.EnumName(PoolTypeV1_name, int32(x))
}

func (PoolTypeV1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{0}
}

type GCPhraseV1 int32

const (
	GCPhraseV1_NEW GCPhraseV1 = 0
	GCPhraseV1_OLD GCPhraseV1 = 1
)

var GCPhraseV1_name = map[int32]string{
	0: "NEW",
	1: "OLD",
}

var GCPhraseV1_value = map[string]int32{
	"NEW": 0,
	"OLD": 1,
}

func (x GCPhraseV1) String() string {
	return proto.EnumName(GCPhraseV1_name, int32(x))
}

func (GCPhraseV1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{1}
}

type JVMMetricV1 struct {
	Time                 int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Cpu                  *v1.CPUV1       `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               []*MemoryV1     `protobuf:"bytes,3,rep,name=memory,proto3" json:"memory,omitempty"`
	MemoryPool           []*MemoryPoolV1 `protobuf:"bytes,4,rep,name=memoryPool,proto3" json:"memoryPool,omitempty"`
	Gc                   []*GCV1         `protobuf:"bytes,5,rep,name=gc,proto3" json:"gc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *JVMMetricV1) Reset()         { *m = JVMMetricV1{} }
func (m *JVMMetricV1) String() string { return proto.CompactTextString(m) }
func (*JVMMetricV1) ProtoMessage()    {}
func (*JVMMetricV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{0}
}

func (m *JVMMetricV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JVMMetricV1.Unmarshal(m, b)
}
func (m *JVMMetricV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JVMMetricV1.Marshal(b, m, deterministic)
}
func (m *JVMMetricV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JVMMetricV1.Merge(m, src)
}
func (m *JVMMetricV1) XXX_Size() int {
	return xxx_messageInfo_JVMMetricV1.Size(m)
}
func (m *JVMMetricV1) XXX_DiscardUnknown() {
	xxx_messageInfo_JVMMetricV1.DiscardUnknown(m)
}

var xxx_messageInfo_JVMMetricV1 proto.InternalMessageInfo

func (m *JVMMetricV1) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *JVMMetricV1) GetCpu() *v1.CPUV1 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *JVMMetricV1) GetMemory() []*MemoryV1 {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *JVMMetricV1) GetMemoryPool() []*MemoryPoolV1 {
	if m != nil {
		return m.MemoryPool
	}
	return nil
}

func (m *JVMMetricV1) GetGc() []*GCV1 {
	if m != nil {
		return m.Gc
	}
	return nil
}

type MemoryV1 struct {
	IsHeap               bool     `protobuf:"varint,1,opt,name=isHeap,proto3" json:"isHeap,omitempty"`
	Init                 int64    `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Max                  int64    `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Used                 int64    `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	Committed            int64    `protobuf:"varint,5,opt,name=committed,proto3" json:"committed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryV1) Reset()         { *m = MemoryV1{} }
func (m *MemoryV1) String() string { return proto.CompactTextString(m) }
func (*MemoryV1) ProtoMessage()    {}
func (*MemoryV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{1}
}

func (m *MemoryV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryV1.Unmarshal(m, b)
}
func (m *MemoryV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryV1.Marshal(b, m, deterministic)
}
func (m *MemoryV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryV1.Merge(m, src)
}
func (m *MemoryV1) XXX_Size() int {
	return xxx_messageInfo_MemoryV1.Size(m)
}
func (m *MemoryV1) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryV1.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryV1 proto.InternalMessageInfo

func (m *MemoryV1) GetIsHeap() bool {
	if m != nil {
		return m.IsHeap
	}
	return false
}

func (m *MemoryV1) GetInit() int64 {
	if m != nil {
		return m.Init
	}
	return 0
}

func (m *MemoryV1) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MemoryV1) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemoryV1) GetCommitted() int64 {
	if m != nil {
		return m.Committed
	}
	return 0
}

type MemoryPoolV1 struct {
	Type                 PoolTypeV1 `protobuf:"varint,1,opt,name=type,proto3,enum=PoolTypeV1" json:"type,omitempty"`
	Init                 int64      `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Max                  int64      `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Used                 int64      `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	Commited             int64      `protobuf:"varint,5,opt,name=commited,proto3" json:"commited,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MemoryPoolV1) Reset()         { *m = MemoryPoolV1{} }
func (m *MemoryPoolV1) String() string { return proto.CompactTextString(m) }
func (*MemoryPoolV1) ProtoMessage()    {}
func (*MemoryPoolV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{2}
}

func (m *MemoryPoolV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryPoolV1.Unmarshal(m, b)
}
func (m *MemoryPoolV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryPoolV1.Marshal(b, m, deterministic)
}
func (m *MemoryPoolV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryPoolV1.Merge(m, src)
}
func (m *MemoryPoolV1) XXX_Size() int {
	return xxx_messageInfo_MemoryPoolV1.Size(m)
}
func (m *MemoryPoolV1) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryPoolV1.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryPoolV1 proto.InternalMessageInfo

func (m *MemoryPoolV1) GetType() PoolTypeV1 {
	if m != nil {
		return m.Type
	}
	return PoolTypeV1_CODE_CACHE_USAGE
}

func (m *MemoryPoolV1) GetInit() int64 {
	if m != nil {
		return m.Init
	}
	return 0
}

func (m *MemoryPoolV1) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MemoryPoolV1) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemoryPoolV1) GetCommited() int64 {
	if m != nil {
		return m.Commited
	}
	return 0
}

type GCV1 struct {
	Phrase               GCPhraseV1 `protobuf:"varint,1,opt,name=phrase,proto3,enum=GCPhraseV1" json:"phrase,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Time                 int64      `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GCV1) Reset()         { *m = GCV1{} }
func (m *GCV1) String() string { return proto.CompactTextString(m) }
func (*GCV1) ProtoMessage()    {}
func (*GCV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{3}
}

func (m *GCV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCV1.Unmarshal(m, b)
}
func (m *GCV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCV1.Marshal(b, m, deterministic)
}
func (m *GCV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCV1.Merge(m, src)
}
func (m *GCV1) XXX_Size() int {
	return xxx_messageInfo_GCV1.Size(m)
}
func (m *GCV1) XXX_DiscardUnknown() {
	xxx_messageInfo_GCV1.DiscardUnknown(m)
}

var xxx_messageInfo_GCV1 proto.InternalMessageInfo

func (m *GCV1) GetPhrase() GCPhraseV1 {
	if m != nil {
		return m.Phrase
	}
	return GCPhraseV1_NEW
}

func (m *GCV1) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GCV1) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterEnum("PoolTypeV1", PoolTypeV1_name, PoolTypeV1_value)
	proto.RegisterEnum("GCPhraseV1", GCPhraseV1_name, GCPhraseV1_value)
	proto.RegisterType((*JVMMetricV1)(nil), "JVMMetricV1")
	proto.RegisterType((*MemoryV1)(nil), "MemoryV1")
	proto.RegisterType((*MemoryPoolV1)(nil), "MemoryPoolV1")
	proto.RegisterType((*GCV1)(nil), "GCV1")
}

func init() { proto.RegisterFile("common/JVM.proto", fileDescriptor_42f5f61b58cf3158) }

var fileDescriptor_42f5f61b58cf3158 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xd1, 0x6e, 0xda, 0x30,
	0x14, 0x86, 0x1b, 0x1c, 0x18, 0x3d, 0xb4, 0x5d, 0xe6, 0x76, 0x53, 0x84, 0xa6, 0x8d, 0xb1, 0x5d,
	0xa0, 0x4a, 0x33, 0x0b, 0x7b, 0x02, 0x16, 0x22, 0xba, 0xaa, 0x81, 0xc8, 0x14, 0x23, 0xed, 0xa6,
	0xca, 0x52, 0x2b, 0x8d, 0x20, 0x71, 0x14, 0xc2, 0x18, 0xbb, 0x9c, 0xb4, 0x37, 0xd9, 0xd5, 0x9e,
	0x72, 0xb2, 0x13, 0x48, 0xef, 0x7b, 0x95, 0xff, 0x7c, 0xe7, 0xd7, 0xc9, 0xef, 0x63, 0x19, 0x8c,
	0x40, 0xc4, 0xb1, 0x48, 0xfa, 0xd7, 0xcc, 0x25, 0x69, 0x26, 0x72, 0xd1, 0x3e, 0x2f, 0x49, 0xf1,
	0x29, 0x60, 0xf7, 0xaf, 0x06, 0xad, 0x6b, 0xe6, 0xba, 0x3c, 0xcf, 0xa2, 0x80, 0x59, 0x18, 0x83,
	0x9e, 0x47, 0x31, 0x37, 0xb5, 0x8e, 0xd6, 0x43, 0x54, 0x69, 0x6c, 0x02, 0x0a, 0xd2, 0x8d, 0x59,
	0xeb, 0x68, 0xbd, 0xd6, 0xa0, 0x41, 0x6c, 0x6f, 0xce, 0x2c, 0x2a, 0x11, 0x7e, 0x07, 0x8d, 0x98,
	0xc7, 0x22, 0xdb, 0x99, 0xa8, 0x83, 0x7a, 0xad, 0xc1, 0x31, 0x71, 0x55, 0xc9, 0x2c, 0x5a, 0x36,
	0xf0, 0x47, 0x80, 0x42, 0x79, 0x42, 0xac, 0x4c, 0x5d, 0xd9, 0x4e, 0x4b, 0x9b, 0x44, 0xcc, 0xa2,
	0x8f, 0x0c, 0xf8, 0x25, 0xd4, 0xc2, 0xc0, 0xac, 0x2b, 0x5b, 0x9d, 0x8c, 0x6d, 0x66, 0xd1, 0x5a,
	0x18, 0x74, 0x7f, 0x41, 0x73, 0x3f, 0x19, 0xbf, 0x82, 0x46, 0xb4, 0xbe, 0xe2, 0x7e, 0xaa, 0x42,
	0x36, 0x69, 0x59, 0xc9, 0xe8, 0x51, 0x12, 0xe5, 0x2a, 0x27, 0xa2, 0x4a, 0x63, 0x03, 0x50, 0xec,
	0xff, 0x34, 0x91, 0x42, 0x52, 0x4a, 0xd7, 0x66, 0xcd, 0xef, 0x4d, 0xbd, 0x70, 0x49, 0x8d, 0x5f,
	0xc3, 0xb1, 0x5c, 0x4a, 0x94, 0xe7, 0xfc, 0xde, 0xac, 0xab, 0x46, 0x05, 0xba, 0x7f, 0x34, 0x38,
	0x79, 0x9c, 0x17, 0xbf, 0x05, 0x3d, 0xdf, 0xa5, 0xc5, 0x8e, 0xce, 0x06, 0x2d, 0x22, 0xf1, 0xed,
	0x2e, 0xe5, 0xcc, 0xa2, 0xaa, 0xf1, 0x84, 0x24, 0x6d, 0x68, 0x16, 0x3f, 0x3e, 0x04, 0x39, 0xd4,
	0xdd, 0x39, 0xe8, 0x72, 0x1f, 0xf8, 0x3d, 0x34, 0xd2, 0x87, 0xcc, 0x5f, 0x57, 0x01, 0xc6, 0xb6,
	0xa7, 0x80, 0x5c, 0x7b, 0xd1, 0xc2, 0x17, 0x50, 0x0f, 0xc4, 0x26, 0xd9, 0x67, 0x28, 0x8a, 0xc3,
	0xed, 0xa2, 0xea, 0x76, 0x2f, 0x7f, 0x6b, 0x00, 0xd5, 0x09, 0xf0, 0x05, 0x18, 0xf6, 0x74, 0xe4,
	0xdc, 0xd9, 0x43, 0xfb, 0xca, 0xb9, 0x9b, 0xcf, 0x86, 0x63, 0xc7, 0x38, 0xc2, 0x06, 0x9c, 0x4c,
	0x9c, 0xc5, 0xd8, 0x99, 0x94, 0x44, 0x93, 0x64, 0x7a, 0x33, 0xaa, 0x48, 0x0d, 0x63, 0x38, 0x9b,
	0xcd, 0x29, 0xfb, 0xca, 0xa6, 0xb4, 0x64, 0x08, 0xbf, 0x80, 0x53, 0xcf, 0xa1, 0x6e, 0x65, 0xd3,
	0xf1, 0x39, 0x3c, 0x77, 0x9d, 0xdb, 0xe1, 0xcc, 0x1b, 0xda, 0xfb, 0xf9, 0xf5, 0xcb, 0x37, 0x00,
	0xd5, 0x21, 0xf0, 0x33, 0x40, 0x13, 0x67, 0x61, 0x1c, 0x49, 0x31, 0xbd, 0x19, 0x19, 0xda, 0x97,
	0x2d, 0x7c, 0x12, 0x59, 0x48, 0xfc, 0xd4, 0x0f, 0x1e, 0x38, 0x59, 0x2f, 0x77, 0x5b, 0x7f, 0xb5,
	0x8c, 0x12, 0x49, 0x62, 0x92, 0xf0, 0x7c, 0x2b, 0xb2, 0x25, 0x59, 0xf9, 0x49, 0xb8, 0xf1, 0x43,
	0x4e, 0xfc, 0x90, 0x27, 0xb9, 0xa7, 0x7d, 0xfb, 0x50, 0x19, 0xfb, 0xa5, 0xa9, 0xbf, 0x37, 0xf5,
	0x95, 0xa9, 0xff, 0xc3, 0xfa, 0x57, 0x6b, 0xcf, 0x96, 0xbb, 0x45, 0x39, 0x6f, 0x52, 0xd8, 0x3c,
	0xf9, 0x38, 0x02, 0xb1, 0xfa, 0xde, 0x50, 0xcf, 0xe4, 0xf3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x86, 0x7a, 0x7e, 0x0b, 0x4f, 0x03, 0x00, 0x00,
}
