// Code generated by protoc-gen-go. DO NOT EDIT.
// source: language-agent-v2/trace.proto

package v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	v2 "github.com/SkyAPM/SkyAPM-php-sdk/reporter/network/common/v2"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SegmentObjectV2 struct {
	TraceSegmentId       *UniqueIdV2     `protobuf:"bytes,1,opt,name=traceSegmentId,proto3" json:"traceSegmentId,omitempty"`
	Spans                []*SpanObjectV2 `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	ServiceId            int32           `protobuf:"varint,3,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	ServiceInstanceId    int32           `protobuf:"varint,4,opt,name=serviceInstanceId,proto3" json:"serviceInstanceId,omitempty"`
	IsSizeLimited        bool            `protobuf:"varint,5,opt,name=isSizeLimited,proto3" json:"isSizeLimited,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SegmentObjectV2) Reset()         { *m = SegmentObjectV2{} }
func (m *SegmentObjectV2) String() string { return proto.CompactTextString(m) }
func (*SegmentObjectV2) ProtoMessage()    {}
func (*SegmentObjectV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_8124ab206744863a, []int{0}
}

func (m *SegmentObjectV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentObjectV2.Unmarshal(m, b)
}
func (m *SegmentObjectV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentObjectV2.Marshal(b, m, deterministic)
}
func (m *SegmentObjectV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentObjectV2.Merge(m, src)
}
func (m *SegmentObjectV2) XXX_Size() int {
	return xxx_messageInfo_SegmentObjectV2.Size(m)
}
func (m *SegmentObjectV2) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentObjectV2.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentObjectV2 proto.InternalMessageInfo

func (m *SegmentObjectV2) GetTraceSegmentId() *UniqueIdV2 {
	if m != nil {
		return m.TraceSegmentId
	}
	return nil
}

func (m *SegmentObjectV2) GetSpans() []*SpanObjectV2 {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *SegmentObjectV2) GetServiceId() int32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *SegmentObjectV2) GetServiceInstanceId() int32 {
	if m != nil {
		return m.ServiceInstanceId
	}
	return 0
}

func (m *SegmentObjectV2) GetIsSizeLimited() bool {
	if m != nil {
		return m.IsSizeLimited
	}
	return false
}

type SegmentReferenceV2 struct {
	RefType                 RefTypeV2   `protobuf:"varint,1,opt,name=refType,proto3,enum=RefTypeV2" json:"refType,omitempty"`
	ParentTraceSegmentId    *UniqueIdV2 `protobuf:"bytes,2,opt,name=parentTraceSegmentId,proto3" json:"parentTraceSegmentId,omitempty"`
	ParentSpanId            int32       `protobuf:"varint,3,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	ParentServiceInstanceId int32       `protobuf:"varint,4,opt,name=parentServiceInstanceId,proto3" json:"parentServiceInstanceId,omitempty"`
	NetworkAddress          string      `protobuf:"bytes,5,opt,name=networkAddress,proto3" json:"networkAddress,omitempty"`
	NetworkAddressId        int32       `protobuf:"varint,6,opt,name=networkAddressId,proto3" json:"networkAddressId,omitempty"`
	EntryServiceInstanceId  int32       `protobuf:"varint,7,opt,name=entryServiceInstanceId,proto3" json:"entryServiceInstanceId,omitempty"`
	EntryEndpoint           string      `protobuf:"bytes,8,opt,name=entryEndpoint,proto3" json:"entryEndpoint,omitempty"`
	EntryEndpointId         int32       `protobuf:"varint,9,opt,name=entryEndpointId,proto3" json:"entryEndpointId,omitempty"`
	ParentEndpoint          string      `protobuf:"bytes,10,opt,name=parentEndpoint,proto3" json:"parentEndpoint,omitempty"`
	ParentEndpointId        int32       `protobuf:"varint,11,opt,name=parentEndpointId,proto3" json:"parentEndpointId,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}    `json:"-"`
	XXX_unrecognized        []byte      `json:"-"`
	XXX_sizecache           int32       `json:"-"`
}

func (m *SegmentReferenceV2) Reset()         { *m = SegmentReferenceV2{} }
func (m *SegmentReferenceV2) String() string { return proto.CompactTextString(m) }
func (*SegmentReferenceV2) ProtoMessage()    {}
func (*SegmentReferenceV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_8124ab206744863a, []int{1}
}

func (m *SegmentReferenceV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentReferenceV2.Unmarshal(m, b)
}
func (m *SegmentReferenceV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentReferenceV2.Marshal(b, m, deterministic)
}
func (m *SegmentReferenceV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentReferenceV2.Merge(m, src)
}
func (m *SegmentReferenceV2) XXX_Size() int {
	return xxx_messageInfo_SegmentReferenceV2.Size(m)
}
func (m *SegmentReferenceV2) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentReferenceV2.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentReferenceV2 proto.InternalMessageInfo

func (m *SegmentReferenceV2) GetRefType() RefTypeV2 {
	if m != nil {
		return m.RefType
	}
	return RefTypeV2_CrossProcess
}

func (m *SegmentReferenceV2) GetParentTraceSegmentId() *UniqueIdV2 {
	if m != nil {
		return m.ParentTraceSegmentId
	}
	return nil
}

func (m *SegmentReferenceV2) GetParentSpanId() int32 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *SegmentReferenceV2) GetParentServiceInstanceId() int32 {
	if m != nil {
		return m.ParentServiceInstanceId
	}
	return 0
}

func (m *SegmentReferenceV2) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *SegmentReferenceV2) GetNetworkAddressId() int32 {
	if m != nil {
		return m.NetworkAddressId
	}
	return 0
}

func (m *SegmentReferenceV2) GetEntryServiceInstanceId() int32 {
	if m != nil {
		return m.EntryServiceInstanceId
	}
	return 0
}

func (m *SegmentReferenceV2) GetEntryEndpoint() string {
	if m != nil {
		return m.EntryEndpoint
	}
	return ""
}

func (m *SegmentReferenceV2) GetEntryEndpointId() int32 {
	if m != nil {
		return m.EntryEndpointId
	}
	return 0
}

func (m *SegmentReferenceV2) GetParentEndpoint() string {
	if m != nil {
		return m.ParentEndpoint
	}
	return ""
}

func (m *SegmentReferenceV2) GetParentEndpointId() int32 {
	if m != nil {
		return m.ParentEndpointId
	}
	return 0
}

type SpanObjectV2 struct {
	SpanId               int32                      `protobuf:"varint,1,opt,name=spanId,proto3" json:"spanId,omitempty"`
	ParentSpanId         int32                      `protobuf:"varint,2,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	StartTime            int64                      `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              int64                      `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Refs                 []*SegmentReferenceV2      `protobuf:"bytes,5,rep,name=refs,proto3" json:"refs,omitempty"`
	OperationNameId      int32                      `protobuf:"varint,6,opt,name=operationNameId,proto3" json:"operationNameId,omitempty"`
	OperationName        string                     `protobuf:"bytes,7,opt,name=operationName,proto3" json:"operationName,omitempty"`
	PeerId               int32                      `protobuf:"varint,8,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Peer                 string                     `protobuf:"bytes,9,opt,name=peer,proto3" json:"peer,omitempty"`
	SpanType             SpanTypeV2                 `protobuf:"varint,10,opt,name=spanType,proto3,enum=SpanTypeV2" json:"spanType,omitempty"`
	SpanLayer            SpanLayerV2                `protobuf:"varint,11,opt,name=spanLayer,proto3,enum=SpanLayerV2" json:"spanLayer,omitempty"`
	ComponentId          int32                      `protobuf:"varint,12,opt,name=componentId,proto3" json:"componentId,omitempty"`
	Component            string                     `protobuf:"bytes,13,opt,name=component,proto3" json:"component,omitempty"`
	IsError              bool                       `protobuf:"varint,14,opt,name=isError,proto3" json:"isError,omitempty"`
	Tags                 []*v2.KeyStringValuePairV2 `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Logs                 []*LogV2                   `protobuf:"bytes,16,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SpanObjectV2) Reset()         { *m = SpanObjectV2{} }
func (m *SpanObjectV2) String() string { return proto.CompactTextString(m) }
func (*SpanObjectV2) ProtoMessage()    {}
func (*SpanObjectV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_8124ab206744863a, []int{2}
}

func (m *SpanObjectV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanObjectV2.Unmarshal(m, b)
}
func (m *SpanObjectV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanObjectV2.Marshal(b, m, deterministic)
}
func (m *SpanObjectV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanObjectV2.Merge(m, src)
}
func (m *SpanObjectV2) XXX_Size() int {
	return xxx_messageInfo_SpanObjectV2.Size(m)
}
func (m *SpanObjectV2) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanObjectV2.DiscardUnknown(m)
}

var xxx_messageInfo_SpanObjectV2 proto.InternalMessageInfo

func (m *SpanObjectV2) GetSpanId() int32 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *SpanObjectV2) GetParentSpanId() int32 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *SpanObjectV2) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SpanObjectV2) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SpanObjectV2) GetRefs() []*SegmentReferenceV2 {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *SpanObjectV2) GetOperationNameId() int32 {
	if m != nil {
		return m.OperationNameId
	}
	return 0
}

func (m *SpanObjectV2) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *SpanObjectV2) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *SpanObjectV2) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *SpanObjectV2) GetSpanType() SpanTypeV2 {
	if m != nil {
		return m.SpanType
	}
	return SpanTypeV2_Entry
}

func (m *SpanObjectV2) GetSpanLayer() SpanLayerV2 {
	if m != nil {
		return m.SpanLayer
	}
	return SpanLayerV2_Unknown
}

func (m *SpanObjectV2) GetComponentId() int32 {
	if m != nil {
		return m.ComponentId
	}
	return 0
}

func (m *SpanObjectV2) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *SpanObjectV2) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *SpanObjectV2) GetTags() []*v2.KeyStringValuePairV2 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SpanObjectV2) GetLogs() []*LogV2 {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LogV2 struct {
	Time                 int64                      `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Data                 []*v2.KeyStringValuePairV2 `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LogV2) Reset()         { *m = LogV2{} }
func (m *LogV2) String() string { return proto.CompactTextString(m) }
func (*LogV2) ProtoMessage()    {}
func (*LogV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_8124ab206744863a, []int{3}
}

func (m *LogV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogV2.Unmarshal(m, b)
}
func (m *LogV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogV2.Marshal(b, m, deterministic)
}
func (m *LogV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogV2.Merge(m, src)
}
func (m *LogV2) XXX_Size() int {
	return xxx_messageInfo_LogV2.Size(m)
}
func (m *LogV2) XXX_DiscardUnknown() {
	xxx_messageInfo_LogV2.DiscardUnknown(m)
}

var xxx_messageInfo_LogV2 proto.InternalMessageInfo

func (m *LogV2) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogV2) GetData() []*v2.KeyStringValuePairV2 {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SegmentObjectV2)(nil), "SegmentObjectV2")
	proto.RegisterType((*SegmentReferenceV2)(nil), "SegmentReferenceV2")
	proto.RegisterType((*SpanObjectV2)(nil), "SpanObjectV2")
	proto.RegisterType((*LogV2)(nil), "LogV2")
}

func init() { proto.RegisterFile("language-agent-v2/trace.proto", fileDescriptor_8124ab206744863a) }

var fileDescriptor_8124ab206744863a = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0xe1, 0x8e, 0xdb, 0x44,
	0x10, 0xc7, 0xf1, 0x9d, 0x93, 0x5c, 0x26, 0xb9, 0x5c, 0xd9, 0x42, 0x71, 0x23, 0x90, 0xa2, 0x70,
	0xa2, 0xa1, 0xe2, 0x36, 0x92, 0x4f, 0x42, 0x7c, 0x43, 0x80, 0x8a, 0x14, 0xf5, 0x54, 0x4e, 0xce,
	0xd5, 0x48, 0x7c, 0xdb, 0xda, 0x73, 0xc6, 0x24, 0xde, 0x35, 0xeb, 0xbd, 0x54, 0xe9, 0x1b, 0xf0,
	0x10, 0xbc, 0x00, 0xef, 0xc4, 0xbb, 0x54, 0x3b, 0xb6, 0x93, 0x38, 0xb9, 0x7c, 0xca, 0xce, 0x6f,
	0xfe, 0x59, 0xef, 0xcc, 0xdf, 0xe3, 0x85, 0xaf, 0x96, 0x42, 0x26, 0x0f, 0x22, 0xc1, 0x2b, 0x91,
	0xa0, 0x34, 0x57, 0x2b, 0x7f, 0x6a, 0xb4, 0x88, 0x90, 0xe7, 0x5a, 0x19, 0x35, 0x7c, 0x1a, 0xa9,
	0x2c, 0x53, 0x72, 0x5a, 0xfe, 0x54, 0xf0, 0x79, 0x05, 0x49, 0x78, 0xb5, 0x9b, 0x1a, 0xff, 0xef,
	0xc0, 0xc5, 0x1c, 0x93, 0x0c, 0xa5, 0xf9, 0xed, 0xdd, 0x5f, 0x18, 0x99, 0xd0, 0x67, 0xd7, 0x30,
	0x20, 0x65, 0xc5, 0x67, 0xb1, 0xe7, 0x8c, 0x9c, 0x49, 0xcf, 0xef, 0xf1, 0xb7, 0x32, 0xfd, 0xfb,
	0x01, 0x67, 0x71, 0xe8, 0x07, 0x7b, 0x12, 0xf6, 0x35, 0xb4, 0x8a, 0x5c, 0xc8, 0xc2, 0x3b, 0x19,
	0x9d, 0x4e, 0x7a, 0xfe, 0x39, 0x9f, 0xe7, 0x42, 0xd6, 0x5b, 0x06, 0x65, 0x8e, 0x7d, 0x09, 0xdd,
	0x02, 0xf5, 0x2a, 0x8d, 0x70, 0x16, 0x7b, 0xa7, 0x23, 0x67, 0xd2, 0x0a, 0xb6, 0x80, 0x7d, 0x07,
	0x9f, 0xd6, 0x81, 0x2c, 0x8c, 0x90, 0xa4, 0x72, 0x49, 0x75, 0x98, 0x60, 0x97, 0x70, 0x9e, 0x16,
	0xf3, 0xf4, 0x03, 0xde, 0xa4, 0x59, 0x6a, 0x30, 0xf6, 0x5a, 0x23, 0x67, 0x72, 0x16, 0x34, 0xe1,
	0xf8, 0x1f, 0x17, 0x58, 0x75, 0xc8, 0x00, 0xef, 0x51, 0xa3, 0x8c, 0x30, 0xf4, 0xd9, 0x25, 0x74,
	0x34, 0xde, 0xdf, 0xad, 0x73, 0xa4, 0xda, 0x06, 0x3e, 0xf0, 0xa0, 0x8c, 0x43, 0x3f, 0xa8, 0x53,
	0xec, 0x47, 0xf8, 0x2c, 0x17, 0x1a, 0xa5, 0xb9, 0x6b, 0xb6, 0xe3, 0xe4, 0xb0, 0x1d, 0x8f, 0x0a,
	0xd9, 0x18, 0xfa, 0x25, 0xb7, 0xcd, 0xd8, 0x94, 0xdc, 0x60, 0xec, 0x07, 0xf8, 0xa2, 0x8a, 0x8f,
	0xd4, 0x7e, 0x2c, 0xcd, 0xbe, 0x81, 0x81, 0x44, 0xf3, 0x5e, 0xe9, 0xc5, 0x4f, 0x71, 0xac, 0xb1,
	0x28, 0xa8, 0x05, 0xdd, 0x60, 0x8f, 0xb2, 0x97, 0xf0, 0xa4, 0x49, 0x66, 0xb1, 0xd7, 0xa6, 0xad,
	0x0f, 0x38, 0xfb, 0x1e, 0x9e, 0xa1, 0x34, 0x7a, 0x7d, 0x78, 0x98, 0x0e, 0xfd, 0xe3, 0x48, 0xd6,
	0xba, 0x41, 0x99, 0x57, 0x32, 0xce, 0x55, 0x2a, 0x8d, 0x77, 0x46, 0x47, 0x69, 0x42, 0x36, 0x81,
	0x8b, 0x06, 0x98, 0xc5, 0x5e, 0x97, 0xb6, 0xdd, 0xc7, 0xb6, 0xb6, 0xb2, 0xec, 0xcd, 0x86, 0x50,
	0xd6, 0xd6, 0xa4, 0xb6, 0xb6, 0x26, 0x99, 0xc5, 0x5e, 0xaf, 0xac, 0x6d, 0x9f, 0x8f, 0xff, 0x75,
	0xa1, 0xbf, 0xfb, 0x56, 0xb2, 0x67, 0xd0, 0x2e, 0x4a, 0x63, 0x1c, 0xfa, 0x4b, 0x15, 0x1d, 0xd8,
	0x76, 0xf2, 0x88, 0x6d, 0xf6, 0x55, 0x36, 0x42, 0x9b, 0xbb, 0x34, 0x43, 0xf2, 0xf5, 0x34, 0xd8,
	0x02, 0xe6, 0x41, 0x07, 0x65, 0x4c, 0x39, 0x97, 0x72, 0x75, 0xc8, 0x5e, 0x80, 0xab, 0xf1, 0xde,
	0x5a, 0x65, 0xc7, 0xe4, 0x29, 0x3f, 0x7c, 0x39, 0x03, 0x12, 0xd8, 0x5e, 0xa9, 0x1c, 0xb5, 0x30,
	0xa9, 0x92, 0x6f, 0x44, 0x86, 0x1b, 0xd3, 0xf6, 0xb1, 0xed, 0x7d, 0x03, 0x91, 0x55, 0xdd, 0xa0,
	0x09, 0x6d, 0xb1, 0x39, 0xa2, 0x9e, 0xc5, 0x64, 0x4d, 0x2b, 0xa8, 0x22, 0xc6, 0xc0, 0xb5, 0x2b,
	0x32, 0xa2, 0x1b, 0xd0, 0x9a, 0xbd, 0x80, 0x33, 0xdb, 0x0a, 0x9a, 0x0f, 0xa0, 0xf9, 0xe8, 0xd1,
	0x3c, 0x57, 0x03, 0xb2, 0x49, 0xb2, 0x97, 0xd0, 0xb5, 0xeb, 0x1b, 0xb1, 0x46, 0x4d, 0x7d, 0x1f,
	0xf8, 0x7d, 0x52, 0x12, 0x09, 0xfd, 0x60, 0x9b, 0x66, 0x23, 0xe8, 0x45, 0x2a, 0xcb, 0x95, 0x2c,
	0x87, 0xa8, 0x4f, 0xa7, 0xd8, 0x45, 0xb6, 0xa7, 0x9b, 0xd0, 0x3b, 0xa7, 0xf3, 0x6c, 0x81, 0xed,
	0x69, 0x5a, 0xbc, 0xd2, 0x5a, 0x69, 0x6f, 0x40, 0xa3, 0x5e, 0x87, 0xec, 0x5b, 0x70, 0x8d, 0x48,
	0x0a, 0xef, 0x82, 0x7a, 0xfa, 0x39, 0x7f, 0x8d, 0xeb, 0xb9, 0xd1, 0xa9, 0x4c, 0x42, 0xb1, 0x7c,
	0xc0, 0x5b, 0x91, 0xda, 0x93, 0x90, 0x84, 0x0d, 0xc1, 0x5d, 0xaa, 0xa4, 0xf0, 0x9e, 0x90, 0xb4,
	0xcd, 0x6f, 0x54, 0x62, 0x73, 0x96, 0x8d, 0x7f, 0x85, 0x16, 0x85, 0xb6, 0x25, 0xc6, 0x5a, 0xe7,
	0x90, 0x75, 0xb4, 0xb6, 0xcf, 0x88, 0x85, 0x11, 0xd5, 0xe7, 0xed, 0xd8, 0x33, 0xac, 0xc4, 0x7f,
	0x0d, 0xcf, 0x77, 0xbf, 0x03, 0x01, 0xe6, 0x4a, 0xd7, 0xe3, 0xcb, 0x38, 0x74, 0x22, 0xb5, 0x5c,
	0x62, 0x64, 0x18, 0xe3, 0x6f, 0xf3, 0xc2, 0x68, 0x14, 0x59, 0xa5, 0x0c, 0xfd, 0x61, 0x8f, 0xff,
	0xa2, 0xb2, 0x4c, 0xc8, 0xb8, 0x08, 0xfd, 0xf1, 0x27, 0x13, 0xe7, 0xe7, 0x0f, 0x70, 0xad, 0x74,
	0xc2, 0x45, 0x2e, 0xa2, 0x3f, 0x91, 0x17, 0x8b, 0xf5, 0x7b, 0xb1, 0x5c, 0xa4, 0xd2, 0x92, 0x8c,
	0x57, 0xe3, 0xcb, 0xeb, 0x3b, 0x81, 0xd3, 0x9d, 0xc0, 0x57, 0xfe, 0xad, 0xf3, 0xc7, 0xe5, 0x56,
	0x3b, 0xad, 0x74, 0xd3, 0x5a, 0x37, 0x25, 0xdd, 0x74, 0xe5, 0xff, 0x77, 0x32, 0x9c, 0x2f, 0xd6,
	0xbf, 0x57, 0x5b, 0xbe, 0x29, 0x65, 0xb7, 0xf6, 0x66, 0x88, 0xd4, 0xf2, 0x5d, 0x9b, 0xee, 0x88,
	0xeb, 0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xc8, 0x20, 0x0f, 0x74, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraceSegmentReportServiceClient is the client API for TraceSegmentReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraceSegmentReportServiceClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (TraceSegmentReportService_CollectClient, error)
}

type traceSegmentReportServiceClient struct {
	cc *grpc.ClientConn
}

func NewTraceSegmentReportServiceClient(cc *grpc.ClientConn) TraceSegmentReportServiceClient {
	return &traceSegmentReportServiceClient{cc}
}

func (c *traceSegmentReportServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (TraceSegmentReportService_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TraceSegmentReportService_serviceDesc.Streams[0], "/TraceSegmentReportService/collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceSegmentReportServiceCollectClient{stream}
	return x, nil
}

type TraceSegmentReportService_CollectClient interface {
	Send(*UpstreamSegmentV2) error
	CloseAndRecv() (*v2.CommandsV2, error)
	grpc.ClientStream
}

type traceSegmentReportServiceCollectClient struct {
	grpc.ClientStream
}

func (x *traceSegmentReportServiceCollectClient) Send(m *UpstreamSegmentV2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceSegmentReportServiceCollectClient) CloseAndRecv() (*v2.CommandsV2, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(v2.CommandsV2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraceSegmentReportServiceServer is the server API for TraceSegmentReportService service.
type TraceSegmentReportServiceServer interface {
	Collect(TraceSegmentReportService_CollectServer) error
}

// UnimplementedTraceSegmentReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTraceSegmentReportServiceServer struct {
}

func (*UnimplementedTraceSegmentReportServiceServer) Collect(srv TraceSegmentReportService_CollectServer) error {
	return status.Errorf(codes.Unimplemented, "method Collect not implemented")
}

func RegisterTraceSegmentReportServiceServer(s *grpc.Server, srv TraceSegmentReportServiceServer) {
	s.RegisterService(&_TraceSegmentReportService_serviceDesc, srv)
}

func _TraceSegmentReportService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceSegmentReportServiceServer).Collect(&traceSegmentReportServiceCollectServer{stream})
}

type TraceSegmentReportService_CollectServer interface {
	SendAndClose(*v2.CommandsV2) error
	Recv() (*UpstreamSegmentV2, error)
	grpc.ServerStream
}

type traceSegmentReportServiceCollectServer struct {
	grpc.ServerStream
}

func (x *traceSegmentReportServiceCollectServer) SendAndClose(m *v2.CommandsV2) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceSegmentReportServiceCollectServer) Recv() (*UpstreamSegmentV2, error) {
	m := new(UpstreamSegmentV2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TraceSegmentReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TraceSegmentReportService",
	HandlerType: (*TraceSegmentReportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collect",
			Handler:       _TraceSegmentReportService_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "language-agent-v2/trace.proto",
}
